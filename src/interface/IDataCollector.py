import os
import json
import secrets
import string
from abc import ABC, abstractmethod
from typing import Type
from src.utils.logger import logger
from src.interface.DataFormat import DataFormat


class IDataCollector(ABC):
    """_summary_
    IDataCollector is an interface for data collector,
    tt is used to read data from a source and store it in a database.
    extend this class to implement your own data collector.
    
    Generally, a collector perform the following steps in linear order:
    read_data() -> save_raw_data() -> parse_data()
    
    Noted that read_data() and save_raw_data() are optional if the raw data sources
    are provided. In this case, the data can be parsed directly.
    """

    @abstractmethod
    def read_data(self):
        """_summary_
        read_data() is a method for reading data from a source.
        It is an optional func to be implemented if the data source 
        (e.g., raw datafile like logs) is already provided.
        Raises:
            NotImplementedError: the method is not implemented
        """
        raise NotImplementedError
    
    @abstractmethod
    def save_raw_data(self):
        """_summary_
        save_raw_data() is a method for saving raw data to a file.
        It follows the func read_data() and is used to save the data, and it 
        is an optional func to be implemented if the data source is already provided.

        Raises:
            NotImplementedError: the method is not implemented
        """
        raise NotImplementedError
    
    @abstractmethod
    def parse_data(self):
        """_summary_
        parse_data() is a method for parsing raw data to a specific format.
        the data format is defined in DataFormat class.

        Raises:
            NotImplementedError: the method is not implemented
        """
        raise NotImplementedError
    
    def _save_json_file(self, dist_path: str, data: any, cls: Type[json.JSONEncoder] = None):
        """_summary_

        Args:
            dist_path (str): _description_
            data (any): _description_
            cls (Type[json.JSONEncoder], optional): _description_. Defaults to None.

        Returns:
            _type_: _description_
        """
        
        
        logger.debug('start: __save_json_file()')

        try:
            # create directory if not exist
            os.makedirs(os.path.dirname(dist_path), exist_ok=True)
            with open(dist_path, "w+") as file:
                json.dump(data, file, indent=2, cls=cls)
            file.close()
        except Exception as e:
            logger.error(e)
            return False

    def _save_file(self, dist_path: str, data: str):
        """_summary_

        Args:
            dist_path (str): _description_
            data (str): _description_

        Returns:
            _type_: _description_
        """
        logger.debug('start: _save_file()')

        try:
            os.makedirs(os.path.dirname(dist_path), exist_ok=True)
            with open(dist_path, "w+") as file:
                file.write(data)
            file.close()
        except Exception as e:
            logger.error(e)
            return False

    def _is_validate_data_format(self, data: any) -> bool:
        """_summary_
        _is_validate_data_format is a method for validating data format matches class DataFormat.

        Args:
            data (any): any data to be validated

        Returns:
            bool: True if data is valid, otherwise False
        """
        logger.debug('start: is_validate_data_format()')
        
        # if data is list, check all items in list
        if isinstance(data, list):
            for item in data:
                if not isinstance(item, DataFormat):
                    logger.error(f"Data is not DataFormat: {item}")
                    return False
        else:
            if not isinstance(data, DataFormat):
                logger.error("Data is not DataFormat: {data}")
                return False

        return True
    
    def _generate_group_suffix(self) -> str:
        """_summary_
        _generate_group_suffix is a method for generating a random string.
        when a group_id is not specified, the group_id is generated by this method.

        Returns:
            str: a random 6-digit string
        """
        logger.debug('start: _generate_group_suffix()')
        return ''.join(secrets.choice(string.digits) for _ in range(6))